        -:    0:Source:/usr/include/c++/9/ext/new_allocator.h
        -:    0:Graph:/mnt/d/周秉霖/Bookstore/cmake-build-debug-coverage/CMakeFiles/Bookstore.dir/main.cpp.gcno
        -:    0:Data:/mnt/d/周秉霖/Bookstore/cmake-build-debug-coverage/CMakeFiles/Bookstore.dir/main.cpp.gcda
        -:    0:Runs:1
        -:    1:// Allocator that wraps operator new -*- C++ -*-
        -:    2:
        -:    3:// Copyright (C) 2001-2019 Free Software Foundation, Inc.
        -:    4://
        -:    5:// This file is part of the GNU ISO C++ Library.  This library is free
        -:    6:// software; you can redistribute it and/or modify it under the
        -:    7:// terms of the GNU General Public License as published by the
        -:    8:// Free Software Foundation; either version 3, or (at your option)
        -:    9:// any later version.
        -:   10:
        -:   11:// This library is distributed in the hope that it will be useful,
        -:   12:// but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   13:// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   14:// GNU General Public License for more details.
        -:   15:
        -:   16:// Under Section 7 of GPL version 3, you are granted additional
        -:   17:// permissions described in the GCC Runtime Library Exception, version
        -:   18:// 3.1, as published by the Free Software Foundation.
        -:   19:
        -:   20:// You should have received a copy of the GNU General Public License and
        -:   21:// a copy of the GCC Runtime Library Exception along with this program;
        -:   22:// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
        -:   23:// <http://www.gnu.org/licenses/>.
        -:   24:
        -:   25:/** @file ext/new_allocator.h
        -:   26: *  This file is a GNU extension to the Standard C++ Library.
        -:   27: */
        -:   28:
        -:   29:#ifndef _NEW_ALLOCATOR_H
        -:   30:#define _NEW_ALLOCATOR_H 1
        -:   31:
        -:   32:#include <bits/c++config.h>
        -:   33:#include <new>
        -:   34:#include <bits/functexcept.h>
        -:   35:#include <bits/move.h>
        -:   36:#if __cplusplus >= 201103L
        -:   37:#include <type_traits>
        -:   38:#endif
        -:   39:
        -:   40:namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)
        -:   41:{
        -:   42:_GLIBCXX_BEGIN_NAMESPACE_VERSION
        -:   43:
        -:   44:  using std::size_t;
        -:   45:  using std::ptrdiff_t;
        -:   46:
        -:   47:  /**
        -:   48:   *  @brief  An allocator that uses global new, as per [20.4].
        -:   49:   *  @ingroup allocators
        -:   50:   *
        -:   51:   *  This is precisely the allocator defined in the C++ Standard.
        -:   52:   *    - all allocation calls operator new
        -:   53:   *    - all deallocation calls operator delete
        -:   54:   *
        -:   55:   *  @tparam  _Tp  Type of allocated object.
        -:   56:   */
        -:   57:  template<typename _Tp>
        -:   58:    class new_allocator
        -:   59:    {
        -:   60:    public:
        -:   61:      typedef size_t     size_type;
        -:   62:      typedef ptrdiff_t  difference_type;
        -:   63:      typedef _Tp*       pointer;
        -:   64:      typedef const _Tp* const_pointer;
        -:   65:      typedef _Tp&       reference;
        -:   66:      typedef const _Tp& const_reference;
        -:   67:      typedef _Tp        value_type;
        -:   68:
        -:   69:      template<typename _Tp1>
        -:   70:	struct rebind
        -:   71:	{ typedef new_allocator<_Tp1> other; };
        -:   72:
        -:   73:#if __cplusplus >= 201103L
        -:   74:      // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:   75:      // 2103. propagate_on_container_move_assignment
        -:   76:      typedef std::true_type propagate_on_container_move_assignment;
        -:   77:#endif
        -:   78:
        -:   79:      _GLIBCXX20_CONSTEXPR
      21*:   80:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC2Ev called 1 returned 100% blocks executed 100%
        1:   80:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIiEC2Ev:
function _ZN9__gnu_cxx13new_allocatorIiEC2Ev called 19 returned 100% blocks executed 100%
       19:   80:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorI12User_AccountEC2Ev:
function _ZN9__gnu_cxx13new_allocatorI12User_AccountEC2Ev called 1 returned 100% blocks executed 100%
        1:   80:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIcEC2Ev:
function _ZN9__gnu_cxx13new_allocatorIcEC2Ev called 0 returned 0% blocks executed 0%
    #####:   80:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
        -:   81:
        -:   82:      _GLIBCXX20_CONSTEXPR
function _ZN9__gnu_cxx13new_allocatorIcEC2ERKS1_ called 0 returned 0% blocks executed 0%
    #####:   83:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
        -:   84:
        -:   85:      template<typename _Tp1>
        -:   86:	_GLIBCXX20_CONSTEXPR
        -:   87:	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }
        -:   88:
      21*:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED2Ev:
function _ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED2Ev called 1 returned 100% blocks executed 100%
        1:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIiED2Ev:
function _ZN9__gnu_cxx13new_allocatorIiED2Ev called 19 returned 100% blocks executed 100%
       19:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorI12User_AccountED2Ev:
function _ZN9__gnu_cxx13new_allocatorI12User_AccountED2Ev called 1 returned 100% blocks executed 100%
        1:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIcED2Ev:
function _ZN9__gnu_cxx13new_allocatorIcED2Ev called 0 returned 0% blocks executed 0%
    #####:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
        -:   90:
        -:   91:      pointer
        -:   92:      address(reference __x) const _GLIBCXX_NOEXCEPT
        -:   93:      { return std::__addressof(__x); }
        -:   94:
        -:   95:      const_pointer
        -:   96:      address(const_reference __x) const _GLIBCXX_NOEXCEPT
        -:   97:      { return std::__addressof(__x); }
        -:   98:
        -:   99:      // NB: __n is permitted to be 0.  The C++ standard says nothing
        -:  100:      // about what the return value is when __n == 0.
        -:  101:      _GLIBCXX_NODISCARD pointer
       15:  102:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  103:      {
       15:  104:	if (__n > this->max_size())
    #####:  105:	  std::__throw_bad_alloc();
        -:  106:
        -:  107:#if __cpp_aligned_new
        -:  108:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  109:	  {
        -:  110:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  111:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  112:	  }
        -:  113:#endif
       15:  114:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        -:  115:      }
------------------
_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEmPKv:
function _ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEmPKv called 4 returned 100% blocks executed 86%
        4:  102:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  103:      {
        4:  104:	if (__n > this->max_size())
        4:  104-block  0
call    0 returned 4
call    1 returned 4
branch  2 taken 0 (fallthrough)
branch  3 taken 4
    #####:  105:	  std::__throw_bad_alloc();
    %%%%%:  105-block  0
call    0 never executed
        -:  106:
        -:  107:#if __cpp_aligned_new
        -:  108:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  109:	  {
        -:  110:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  111:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  112:	  }
        -:  113:#endif
        4:  114:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        4:  114-block  0
call    0 returned 4
        -:  115:      }
------------------
_ZN9__gnu_cxx13new_allocatorI12User_AccountE8allocateEmPKv:
function _ZN9__gnu_cxx13new_allocatorI12User_AccountE8allocateEmPKv called 1 returned 100% blocks executed 86%
        1:  102:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  103:      {
        1:  104:	if (__n > this->max_size())
        1:  104-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    #####:  105:	  std::__throw_bad_alloc();
    %%%%%:  105-block  0
call    0 never executed
        -:  106:
        -:  107:#if __cpp_aligned_new
        -:  108:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  109:	  {
        -:  110:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  111:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  112:	  }
        -:  113:#endif
        1:  114:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        1:  114-block  0
call    0 returned 1
        -:  115:      }
------------------
_ZN9__gnu_cxx13new_allocatorIiE8allocateEmPKv:
function _ZN9__gnu_cxx13new_allocatorIiE8allocateEmPKv called 10 returned 100% blocks executed 86%
       10:  102:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  103:      {
       10:  104:	if (__n > this->max_size())
       10:  104-block  0
call    0 returned 10
call    1 returned 10
branch  2 taken 0 (fallthrough)
branch  3 taken 10
    #####:  105:	  std::__throw_bad_alloc();
    %%%%%:  105-block  0
call    0 never executed
        -:  106:
        -:  107:#if __cpp_aligned_new
        -:  108:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  109:	  {
        -:  110:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  111:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  112:	  }
        -:  113:#endif
       10:  114:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
       10:  114-block  0
call    0 returned 10
        -:  115:      }
------------------
        -:  116:
        -:  117:      // __p is not permitted to be a null pointer.
        -:  118:      void
       15:  119:      deallocate(pointer __p, size_type)
        -:  120:      {
        -:  121:#if __cpp_aligned_new
        -:  122:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  123:	  {
        -:  124:	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
        -:  125:	    return;
        -:  126:	  }
        -:  127:#endif
       15:  128:	::operator delete(__p);
       15:  129:      }
------------------
_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10deallocateEPS6_m:
function _ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10deallocateEPS6_m called 4 returned 100% blocks executed 100%
        4:  119:      deallocate(pointer __p, size_type)
        -:  120:      {
        -:  121:#if __cpp_aligned_new
        -:  122:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  123:	  {
        -:  124:	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
        -:  125:	    return;
        -:  126:	  }
        -:  127:#endif
        4:  128:	::operator delete(__p);
        4:  128-block  0
call    0 returned 4
        4:  129:      }
------------------
_ZN9__gnu_cxx13new_allocatorIiE10deallocateEPim:
function _ZN9__gnu_cxx13new_allocatorIiE10deallocateEPim called 10 returned 100% blocks executed 100%
       10:  119:      deallocate(pointer __p, size_type)
        -:  120:      {
        -:  121:#if __cpp_aligned_new
        -:  122:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  123:	  {
        -:  124:	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
        -:  125:	    return;
        -:  126:	  }
        -:  127:#endif
       10:  128:	::operator delete(__p);
       10:  128-block  0
call    0 returned 10
       10:  129:      }
------------------
_ZN9__gnu_cxx13new_allocatorI12User_AccountE10deallocateEPS1_m:
function _ZN9__gnu_cxx13new_allocatorI12User_AccountE10deallocateEPS1_m called 1 returned 100% blocks executed 100%
        1:  119:      deallocate(pointer __p, size_type)
        -:  120:      {
        -:  121:#if __cpp_aligned_new
        -:  122:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  123:	  {
        -:  124:	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
        -:  125:	    return;
        -:  126:	  }
        -:  127:#endif
        1:  128:	::operator delete(__p);
        1:  128-block  0
call    0 returned 1
        1:  129:      }
------------------
        -:  130:
        -:  131:      size_type
       45:  132:      max_size() const _GLIBCXX_USE_NOEXCEPT
        -:  133:      {
        -:  134:#if __PTRDIFF_MAX__ < __SIZE_MAX__
       45:  135:	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
        -:  136:#else
        -:  137:	return size_t(-1) / sizeof(_Tp);
        -:  138:#endif
        -:  139:      }
------------------
_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv:
function _ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv called 12 returned 100% blocks executed 100%
       12:  132:      max_size() const _GLIBCXX_USE_NOEXCEPT
        -:  133:      {
        -:  134:#if __PTRDIFF_MAX__ < __SIZE_MAX__
       12:  135:	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
       12:  135-block  0
        -:  136:#else
        -:  137:	return size_t(-1) / sizeof(_Tp);
        -:  138:#endif
        -:  139:      }
------------------
_ZNK9__gnu_cxx13new_allocatorI12User_AccountE8max_sizeEv:
function _ZNK9__gnu_cxx13new_allocatorI12User_AccountE8max_sizeEv called 3 returned 100% blocks executed 100%
        3:  132:      max_size() const _GLIBCXX_USE_NOEXCEPT
        -:  133:      {
        -:  134:#if __PTRDIFF_MAX__ < __SIZE_MAX__
        3:  135:	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
        3:  135-block  0
        -:  136:#else
        -:  137:	return size_t(-1) / sizeof(_Tp);
        -:  138:#endif
        -:  139:      }
------------------
_ZNK9__gnu_cxx13new_allocatorIiE8max_sizeEv:
function _ZNK9__gnu_cxx13new_allocatorIiE8max_sizeEv called 30 returned 100% blocks executed 100%
       30:  132:      max_size() const _GLIBCXX_USE_NOEXCEPT
        -:  133:      {
        -:  134:#if __PTRDIFF_MAX__ < __SIZE_MAX__
       30:  135:	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
       30:  135-block  0
        -:  136:#else
        -:  137:	return size_t(-1) / sizeof(_Tp);
        -:  138:#endif
        -:  139:      }
------------------
        -:  140:
        -:  141:#if __cplusplus >= 201103L
        -:  142:      template<typename _Up, typename... _Args>
        -:  143:	void
     105*:  144:	construct(_Up* __p, _Args&&... __args)
        -:  145:	noexcept(noexcept(::new((void *)__p)
        -:  146:			    _Up(std::forward<_Args>(__args)...)))
     105*:  147:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS6_JS6_EEEvPT_DpOT0_:
function _ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS6_JS6_EEEvPT_DpOT0_ called 7 returned 100% blocks executed 100%
        7:  144:	construct(_Up* __p, _Args&&... __args)
        -:  145:	noexcept(noexcept(::new((void *)__p)
        -:  146:			    _Up(std::forward<_Args>(__args)...)))
        7:  147:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
        7:  147-block  0
call    0 returned 7
call    1 returned 7
call    2 returned 7
call    3 returned 7
call    4 returned 7
------------------
_ZN9__gnu_cxx13new_allocatorI12User_AccountE9constructIS1_JS1_EEEvPT_DpOT0_:
function _ZN9__gnu_cxx13new_allocatorI12User_AccountE9constructIS1_JS1_EEEvPT_DpOT0_ called 0 returned 0% blocks executed 0%
    #####:  144:	construct(_Up* __p, _Args&&... __args)
        -:  145:	noexcept(noexcept(::new((void *)__p)
        -:  146:			    _Up(std::forward<_Args>(__args)...)))
    #####:  147:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    %%%%%:  147-block  0
call    0 never executed
call    1 never executed
call    2 never executed
------------------
_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS6_JRKS6_EEEvPT_DpOT0_:
function _ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS6_JRKS6_EEEvPT_DpOT0_ called 78 returned 100% blocks executed 88%
       78:  144:	construct(_Up* __p, _Args&&... __args)
        -:  145:	noexcept(noexcept(::new((void *)__p)
        -:  146:			    _Up(std::forward<_Args>(__args)...)))
       78:  147:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
       78:  147-block  0
call    0 returned 78
call    1 returned 78
call    2 returned 78
call    3 returned 78
call    4 returned 78
branch  5 taken 78 (fallthrough)
branch  6 taken 0 (throw)
       78:  147-block  1
    $$$$$:  147-block  2
call    7 never executed
------------------
_ZN9__gnu_cxx13new_allocatorI12User_AccountE9constructIS1_JRKS1_EEEvPT_DpOT0_:
function _ZN9__gnu_cxx13new_allocatorI12User_AccountE9constructIS1_JRKS1_EEEvPT_DpOT0_ called 10 returned 100% blocks executed 100%
       10:  144:	construct(_Up* __p, _Args&&... __args)
        -:  145:	noexcept(noexcept(::new((void *)__p)
        -:  146:			    _Up(std::forward<_Args>(__args)...)))
       10:  147:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
       10:  147-block  0
call    0 returned 10
call    1 returned 10
call    2 returned 10
------------------
_ZN9__gnu_cxx13new_allocatorIiE9constructIiJRKiEEEvPT_DpOT0_:
function _ZN9__gnu_cxx13new_allocatorIiE9constructIiJRKiEEEvPT_DpOT0_ called 10 returned 100% blocks executed 100%
       10:  144:	construct(_Up* __p, _Args&&... __args)
        -:  145:	noexcept(noexcept(::new((void *)__p)
        -:  146:			    _Up(std::forward<_Args>(__args)...)))
       10:  147:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
       10:  147-block  0
call    0 returned 10
call    1 returned 10
call    2 returned 10
call    3 returned 10
------------------
        -:  148:
        -:  149:      template<typename _Up>
        -:  150:	void
      17*:  151:	destroy(_Up* __p)
        -:  152:	noexcept(noexcept( __p->~_Up()))
      17*:  153:	{ __p->~_Up(); }
------------------
_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE7destroyIS6_EEvPT_:
function _ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE7destroyIS6_EEvPT_ called 7 returned 100% blocks executed 100%
        7:  151:	destroy(_Up* __p)
        -:  152:	noexcept(noexcept( __p->~_Up()))
        7:  153:	{ __p->~_Up(); }
        7:  153-block  0
call    0 returned 7
call    1 returned 7
------------------
_ZN9__gnu_cxx13new_allocatorIiE7destroyIiEEvPT_:
function _ZN9__gnu_cxx13new_allocatorIiE7destroyIiEEvPT_ called 0 returned 0% blocks executed 0%
    #####:  151:	destroy(_Up* __p)
        -:  152:	noexcept(noexcept( __p->~_Up()))
    #####:  153:	{ __p->~_Up(); }
------------------
_ZN9__gnu_cxx13new_allocatorI12User_AccountE7destroyIS1_EEvPT_:
function _ZN9__gnu_cxx13new_allocatorI12User_AccountE7destroyIS1_EEvPT_ called 10 returned 100% blocks executed 100%
       10:  151:	destroy(_Up* __p)
        -:  152:	noexcept(noexcept( __p->~_Up()))
       10:  153:	{ __p->~_Up(); }
------------------
        -:  154:#else
        -:  155:      // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  156:      // 402. wrong new expression in [some_] allocator::construct
        -:  157:      void
        -:  158:      construct(pointer __p, const _Tp& __val)
        -:  159:      { ::new((void *)__p) _Tp(__val); }
        -:  160:
        -:  161:      void
        -:  162:      destroy(pointer __p) { __p->~_Tp(); }
        -:  163:#endif
        -:  164:
        -:  165:      template<typename _Up>
        -:  166:	friend bool
        -:  167:	operator==(const new_allocator&, const new_allocator<_Up>&)
        -:  168:	_GLIBCXX_NOTHROW
        -:  169:	{ return true; }
        -:  170:
        -:  171:      template<typename _Up>
        -:  172:	friend bool
        -:  173:	operator!=(const new_allocator&, const new_allocator<_Up>&)
        -:  174:	_GLIBCXX_NOTHROW
        -:  175:	{ return false; }
        -:  176:    };
        -:  177:
        -:  178:_GLIBCXX_END_NAMESPACE_VERSION
        -:  179:} // namespace
        -:  180:
        -:  181:#endif
